@using IntranetPOPS1819.Controllers
@using IntranetPOPS1819.Models

@(Html.Kendo().Grid<IntranetPOPS1819.Models.LigneDeFrais>()
									  .Name("grid")
									  .HtmlAttributes(new { style = "height: 500px" })
									  .Columns(columns =>
									  {
										  columns.Bound(c => c.Nom);
										  columns.Bound(c => c.Somme);
										  columns.Bound(c => c.Mission).ClientTemplate(
												"# if (Mission != null) { #" +
												"<div>#= Mission.Nom #</div>" +
												"#} else {#" +
												"<div> </div>" +
												"# } #"
											);
										  columns.Bound(c => c.Statut).ClientTemplate(
											"# if (Statut == 1){ #" +
											"<font color=\"DarkOrange\">En Attente</font>" +
										"# }else if(Statut == 2){ #" +
											"<font color=\"ForestGreen\">Validée par le chef</font>" +
										"# }else if(Statut == 3){ #" +
											"<font color=\"ForestGreen\">Validée</font>" +
										"# }else{ #" +
											"<font color=\"FireBrick\">Refusée</font>" + "# } #"
											);
										  columns.Bound(c => c.Type);
										  columns.Bound(c => c.Date);
										  columns.Bound(e => e.ResumeFileUrl).EditorTemplateName("ResumeFileUrl").Title("Justification").ClientTemplate("#:Filename#");
										  columns.Command(command => command.Custom("Détail du refus").Click("showDetailRefus").HtmlAttributes(new { @class = "detailRefus" }).Visible("editVisible")).Width(100);
										  columns.Command(command => command.Edit().Text(" ").HtmlAttributes(new { @class = "editer" })).Width(100);
										  columns.Command(command => command.Destroy().IconClass("fa fa-trash").Text(" ").HtmlAttributes(new { @class = "supprimer" })).Width(100);
									  })
											.ToolBar(toolbar =>
											toolbar.Template(@<text>
                                                <div>
                                                    <button class="k-button k-button-icontext k-grid-add" id="AddLigne" href="#"><span class="k-icon k-add"></span>Ajouter une ligne de frais</button>
                                                    <button class="k-button k-button-icontext" id="EnvoyerNote">Envoyer la note de frais</button>
                                                </div>
                                            </text>)
																)
																		.Editable(editable => editable.Mode(GridEditMode.InLine))
																		.Sortable(sortable =>
																		{
																			sortable.SortMode(GridSortMode.SingleColumn);
																		})
																		.Scrollable(scrollable => scrollable.Height("auto"))
																		.Events(events =>
																		{
																			events.Save("onSave");
																			events.SaveChanges("onSaveChanges");
																			events.Edit("onEdit");
																			events.DataBound("onDataBound");
																			events.DataBinding("onDataBinding");
																		})
																		.DataSource(dataSource => dataSource
																			.Ajax()
																			.Model(model =>
																			{
																				model.Field(c => c.Type).DefaultValue(IntranetPOPS1819.Models.TypeLigneDeFrais.Autre);
																				model.Field(c => c.Date).DefaultValue(DateTime.Today);
																				model.Field(c => c.Somme).DefaultValue(0);
																				model.Field(c => c.Statut).DefaultValue(IntranetPOPS1819.Models.StatutLigneDeFrais.EnAttente).Editable(false);
																				model.Field(c => c.Mission).DefaultValue(ViewData["defaultMission"] as IntranetPOPS1819.Models.Mission);
																				model.Id(p => p.Id);
																			})
																			.Read(read => read.Action("LigneDeFrais_Read", "NoteDeFrais", new { idNote = Model }))
																			.Create(create => create.Action("LigneDeFrais_Create", "NoteDeFrais", new { n = Model }))
																			.Update(update => update.Action("LigneDeFrais_Update", "NoteDeFrais"))
																			.Destroy(destroy => destroy.Action("LigneDeFrais_Destroy", "NoteDeFrais"))
																		)
)

												<div class="modal fade" id="msgModalRefusNote" role="dialog">
													<div class="modal-dialog">
														<div class="modal-content">
															<div class="modal-header">
																<h4 class="modal-title">Détail du refus de la ligne de frais</h4>
															</div>
																<div class="modal-body">
																	<div class="form-row">
																		<div class="col-md-12" style=" margin-top: 10px; margin-left:90px">
																			<textarea class="form-control" rows="10" id="texteMessageRefus" disabled></textarea>
																		</div>
																	</div>
																</div>
																<div class="modal-footer">
																	<div class="col-md-12" style="margin-left:90px">
																		<button type="button" class="btn btn-primary" data-dismiss="modal" style="float:right">Fermer</button>
																	</div>
																</div>
														</div>
													</div>
												</div>

<style>
    .editer {
        background-color: #ffc107;
        color: white;
    }

    .supprimer {
        background-color: #dc3545;
        color: white;
    }

    .Disabled {
        pointer-events: none;
        cursor: not-allowed;
        opacity: 0.65;
        filter: alpha(opacity=65);
        -webkit-box-shadow: none;
        box-shadow: none;
    }
</style>

<script>
	function editVisible(dataItem) {
		// hide the Edit button for the item with ProductID=1
		return dataItem.Statut == 0;
	}
</script>
<script type="text/javascript">
	var test = '@ViewData["IsComplete"]';
	if (test == 'True' || '@ViewData["IsOld"]' == 'True') {
		$('#EnvoyerNote').addClass('Disabled');
		$('#AddLigne').addClass('Disabled');
	}
	$('#EnvoyerNote').click(function () {
		
		var grid = $("#grid").data("kendoGrid");
		var items = grid.dataSource.data();
		if (items.length == 0) {
			alert('Il n\y a pas de lignes de frais dans cette note. Action impossible.');
		}
		else {
			$.post( "EnvoyerNote", {IdNote: "@Model"}, function( data ) {
				alert('La note de frais a été envoyée');
				$('#EnvoyerNote').addClass('Disabled');
				$('#AddLigne').addClass('Disabled');
			console.log(data);
		});
		}
	});
</script>
<script>
	function showDetailRefus(e) {
		e.preventDefault();
		
		var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
		var texte = document.getElementById('texteMessageRefus');
		if (dataItem.Commentaire != "") {
			texte.value = dataItem.Commentaire;
		}
		else {
			texte.value = "Il n'y a pas d'explication pour le refus de cette ligne de frais";
		}
		$('#msgModalRefusNote').modal('show');
		
	}
	function onSave(e) {
		console.log(e)
        //Implement the event handler for Save
    }

    function onSaveChanges(e) {
        //Implement the event handler for SaveChanges

    }

    function onEdit(e) {

    }

    function onDataBound(e) {
        var grid = $("#grid").data("kendoGrid");
        var gridData = grid.dataSource.view();

        for (var i = 0; i < gridData.length; i++) {

            var currentUid = gridData[i].uid;

            if (gridData[i].Statut == 2 || gridData[i].Statut == 3) {
				var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
				
                var editButton = $(currenRow).find(".k-grid-edit");
				var deleteButton = $(currenRow).find(".k-grid-delete");
				var detailRefus = $(currenRow).find(".detailRefus");

                editButton.hide();
				deleteButton.hide();
				detailRefus.hide();
            }
        }
    }

    function onDataBinding(e) {
        //Implement the event handler for DataBinding
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    function onSelectResumeFile(e) {
        $.each(e.files, function (index, value) {
            var allowedExtensions = ".doc|.docx|.pdf|.png|.jpg";
            if (allowedExtensions.indexOf(value.extension.toLowerCase()) < 0) {
                alert("Ce type de fichier n'est pas supporté.");
                e.preventDefault();
            }
        });
    }
    function onUploadSuccessResumeFile(e) {
        switch (e.response.Type.toString().toLowerCase()) {
            case "upload":
                alert('Le fichier a été uploadé avec succès.');
                break;
            case "remove":
                alert('Le fichier a bien été supprimé.');
                break;
        }
    }
</script>
