@using IntranetPOPS1819.Controllers
@using IntranetPOPS1819.Models

@(Html.Kendo().Grid<IntranetPOPS1819.Models.LigneDeFrais>()
                                      .Name("grid")
                                      .HtmlAttributes(new { style = "height: 500px" })
                                      .Columns(columns =>
                                      {
                                          columns.Bound(c => c.Nom);
                                          columns.Bound(c => c.Somme);
                                          columns.Bound(c => c.Mission).ClientTemplate(
                                                "# if (Mission != null) { #" +
                                                "<div>#= Mission.Nom #</div>" +
                                                "#} else {#" +
                                                "<div> </div>" +
                                                "# } #"
                                            );
                                          columns.Bound(c => c.Statut).ClientTemplate(
                                            "# if (Statut == 1){ #" +
                                            "<font color=\"DarkOrange\">En Attente</font>" +
                                        "# }else if(Statut == 2){ #" +
                                            "<font color=\"ForestGreen\">Validée par le chef</font>" +
                                        "# }else if(Statut == 3){ #" +
                                            "<font color=\"ForestGreen\">Validée</font>" +
                                        "# }else{ #" +
                                            "<font color=\"FireBrick\">Refusée</font>" + "# } #"
                                            );
                                          columns.Bound(c => c.Type);
                                          columns.Bound(c => c.Date);
                                          columns.Bound(e => e.ResumeFileUrl).EditorTemplateName("ResumeFileUrl").Title("Justification").ClientTemplate("#:Filename#");
                                          columns.Command(command => command.Edit().Text(" ").HtmlAttributes(new { @class = "editer" })).Width(100);
                                          columns.Command(command => command.Destroy().IconClass("fa fa-trash").Text(" ").HtmlAttributes(new { @class = "supprimer" })).Width(100);
                                      })
                                            .ToolBar(toolbar =>
                                            toolbar.Template(@<text>
                                                <div>
                                                    <button class="k-button k-button-icontext k-grid-add" id="AddLigne" href="#"><span class="k-icon k-add"></span>Ajouter une ligne de frais</button>
                                                    <button class="k-button k-button-icontext" id="EnvoyerNote">Envoyer la note de frais</button>
                                                </div>
                                            </text>)
                                                                )
                                                                        .Editable(editable => editable.Mode(GridEditMode.InLine))
                                                                        .Sortable(sortable =>
                                                                        {
                                                                            sortable.SortMode(GridSortMode.SingleColumn);
                                                                        })
                                                                        .Scrollable(scrollable => scrollable.Height("auto"))
                                                                        .Events(events =>
                                                                        {
                                                                            events.Save("onSave");
                                                                            events.SaveChanges("onSaveChanges");
                                                                            events.Edit("onEdit");
                                                                            events.DataBound("onDataBound");
                                                                            events.DataBinding("onDataBinding");
                                                                        })
                                                                        .DataSource(dataSource => dataSource
                                                                            .Ajax()
                                                                            .Model(model =>
                                                                            {
                                                                                model.Field(c => c.Date).DefaultValue(DateTime.Today);
                                                                                model.Field(c => c.Somme).DefaultValue(0);
                                                                                model.Field(c => c.Statut).DefaultValue(IntranetPOPS1819.Models.StatutLigneDeFrais.EnAttente).Editable(false);
                                                                                model.Field(c => c.Mission).DefaultValue(ViewData["defaultMission"] as IntranetPOPS1819.Models.Mission);
                                                                                model.Id(p => p.Id);
                                                                            })
                                                                            .Read(read => read.Action("LigneDeFrais_Read", "NoteDeFrais", new { idNote = Model }))
                                                                            .Create(create => create.Action("LigneDeFrais_Create", "NoteDeFrais", new { n = Model }))
                                                                            .Update(update => update.Action("LigneDeFrais_Update", "NoteDeFrais"))
                                                                            .Destroy(destroy => destroy.Action("LigneDeFrais_Destroy", "NoteDeFrais"))
                                                                        )
)

<style>
    .editer {
        background-color: #ffc107;
        color: white;
    }

    .supprimer {
        background-color: #dc3545;
        color: white;
    }

    .Disabled {
        pointer-events: none;
        cursor: not-allowed;
        opacity: 0.65;
        filter: alpha(opacity=65);
        -webkit-box-shadow: none;
        box-shadow: none;
    }
</style>
<script type="text/javascript">
	var test = '@ViewData["IsComplete"]';
	if (test == 'True' || '@ViewData["IsOld"]' == 'True') {
		$('#EnvoyerNote').addClass('Disabled');
		$('#AddLigne').addClass('Disabled');
	}
	$('#EnvoyerNote').click(function () {
		$('#EnvoyerNote').addClass('Disabled');
		$('#AddLigne').addClass('Disabled');
		$.post( "EnvoyerNote", {IdNote: "@Model"}, function( data ) {
			alert('La note de frais a été envoyée');
			console.log(data);
		});
	});
</script>
<script>

    function onSave(e) {
        //Implement the event handler for Save
    }

    function onSaveChanges(e) {
        //Implement the event handler for SaveChanges

    }

    function onEdit(e) {

    }

    function onDataBound(e) {
        var grid = $("#grid").data("kendoGrid");
        var gridData = grid.dataSource.view();

        for (var i = 0; i < gridData.length; i++) {

            var currentUid = gridData[i].uid;

            if (gridData[i].Statut == 2 || gridData[i].Statut == 3) {
                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                var editButton = $(currenRow).find(".k-grid-edit");
                var deleteButton = $(currenRow).find(".k-grid-delete");

                editButton.hide();
                deleteButton.hide();
            }
        }
    }

    function onDataBinding(e) {
        //Implement the event handler for DataBinding
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    function onSelectResumeFile(e) {
        $.each(e.files, function (index, value) {
            var allowedExtensions = ".doc|.docx|.pdf|.png|.jpg";
            if (allowedExtensions.indexOf(value.extension.toLowerCase()) < 0) {
                alert("Ce type de fichier n'est pas supporté.");
                e.preventDefault();
            }
        });
    }
    function onUploadSuccessResumeFile(e) {
        switch (e.response.Type.toString().toLowerCase()) {
            case "upload":
                alert('Le fichier a été uploadé avec succès.');
                break;
            case "remove":
                alert('Le fichier a bien été supprimé.');
                break;
        }
    }
</script>
