@(Html.Kendo().Grid<IntranetPOPS1819.Models.LigneDeFrais>()
				  .Name("grid")
				  .HtmlAttributes(new { style = "height: 500px" })
				  .Columns(columns =>
				  {
					  columns.Bound(c => c.Nom);
					  columns.Bound(c => c.Somme);
					  columns.Bound(c => c.Complete);
					  columns.Bound(c => c.Statut).ClientTemplate(
						"# if (Statut == 2){ #" +
							"<font color=\"DarkOrange\">En Attente</font>" +
						"# }else if(Statut == 0){ #" +

							"<font color=\"ForestGreen\">Validée</font>" +
						"# }else{ #" +
							"<font color=\"FireBrick\">Refusée</font>" + "# } #"

						);
					  columns.Bound(c => c.Type);
					  columns.Bound(c => c.Date).Format("{0:dd/MM/yyyy}");
					  columns.Bound(e => e.ResumeFileUrl).EditorTemplateName("ResumeFileUrl").Title("Justification").ClientTemplate("#:Filename#");
					  columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
				  })
						.ToolBar(toolbar =>
						{
							toolbar.Create();
						})
						.Editable(editable => editable.Mode(GridEditMode.InLine))
						.Sortable(sortable =>
						{
							sortable.SortMode(GridSortMode.SingleColumn);
						})
						.Scrollable()
						.Events(events =>
						{
							events.Save("onSave");
							events.SaveChanges("onSaveChanges");
							events.Edit("onEdit");
							events.DataBound("onDataBound");
							events.DataBinding("onDataBinding");
						})
						.DataSource(dataSource => dataSource
							.Ajax()
							.Model(model => model.Id(p => p.Id))
							.Read(read => read.Action("LigneDeFrais_Read", "NoteDeFrais", new { IdNote = Model }))
							.Create(create => create.Action("LigneDeFrais_Create", "NoteDeFrais", new { IdNote = Model }))
							.Update(update => update.Action("LigneDeFrais_Update", "NoteDeFrais"))
							.Destroy(destroy => destroy.Action("LigneDeFrais_Destroy", "NoteDeFrais"))
						)
)

<script>

	function onSave(e) {
		//Implement the event handler for Save
	}

	function onSaveChanges(e) {
		//Implement the event handler for SaveChanges
	}

	function onEdit(e) {
		//Implement the event handler for Edit
	}

	function onDataBound(e) {
		//Implement the event handler for DataBound
	}

	function onDataBinding(e) {
		//Implement the event handler for DataBinding
	}
	function error_handler(e) {
		if (e.errors) {
			var message = "Errors:\n";
			$.each(e.errors, function (key, value) {
				if ('errors' in value) {
					$.each(value.errors, function () {
						message += this + "\n";
					});
				}
			});
			alert(message);
		}
	}
	function onSelectResumeFile(e) {
		$.each(e.files, function (index, value) {
			var allowedExtensions = ".doc|.docx|.pdf|.png|.jpg";
			if (allowedExtensions.indexOf(value.extension.toLowerCase()) < 0) {
				alert('This file is not allowed. Check file type.');
				e.preventDefault();
			}
		});
	}
	function onUploadSuccessResumeFile(e) {
		switch (e.response.Type.toString().toLowerCase()) {
			case "upload":
				alert('Your resume file has been uploaded successfully.');
				break;
			case "remove":
				alert('Your resume file has been removed successfully.');
				break;
		}
	}
</script>
